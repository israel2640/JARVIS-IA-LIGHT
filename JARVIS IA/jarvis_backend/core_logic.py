# core_logic.py
import json
import requests
import base64
from config import openai_client, SERPER_API_KEY
from utils import detectar_idioma_com_ia, chamar_openai_com_retries
# Importe outras fun√ß√µes do utils se precisar, como carregar_preferencias

# NOTA: As fun√ß√µes `carregar_modelo_embedding` e `inicializar_memoria_dinamica`
# dever√£o ser chamadas uma vez quando o servidor iniciar (em main.py) e o
# modelo e vetores passados como argumentos para as fun√ß√µes que os usam.

def analisar_metadados_prompt(prompt_usuario):
    # ... (c√≥digo da fun√ß√£o copiado de app.py, usando openai_client) ...
    pass

def responder_com_inteligencia(pergunta_usuario, historico_chat, memoria, preferencias, ultima_emocao):
    # Esta fun√ß√£o √© a fus√£o da sua `responder_com_inteligencia` e `processar_entrada_usuario`.
    # Ela n√£o deve ter nenhuma chamada a `st.` (streamlit).
    
    idioma_da_pergunta = detectar_idioma_com_ia(pergunta_usuario)
    # ... (toda a sua l√≥gica de constru√ß√£o de prompt, busca na mem√≥ria local, etc.) ...

    # A fun√ß√£o deve apenas CONSTRUIR o prompt e chamar a IA.
    # A decis√£o de salvar o chat, etc., fica no endpoint da API em main.py.
    prompt_sistema = "..." # Construa seu prompt aqui
    mensagens_para_api = [{"role": "system", "content": prompt_sistema}]
    mensagens_para_api.extend(historico_chat)

    resposta_modelo = chamar_openai_com_retries(mensagens_para_api)
    
    if resposta_modelo:
        return resposta_modelo.choices[0].message.content
    return "Desculpe, n√£o consegui obter uma resposta no momento."

def gerar_imagem_com_dalle(prompt_para_imagem):
    try:
        response = openai_client.images.generate(
            model="dall-e-3", prompt=prompt_para_imagem, size="1024x1024", n=1
        )
        image_url = response.data[0].url
        image_response = requests.get(image_url)
        image_response.raise_for_status()
        image_base64 = base64.b64encode(image_response.content).decode('utf-8')
        return f"data:image/png;base64,{image_base64}"
    except Exception as e:
        print(f"Erro ao gerar imagem com DALL-E: {e}")
        return None

def buscar_na_internet(pergunta_usuario):
    # ... (c√≥digo da fun√ß√£o copiado de app.py, usando SERPER_API_KEY) ...
    pass

# ==========================================================
# === NOVA FUN√á√ÉO ADICIONADA CIRURGICAMENTE
# ==========================================================
def gerar_titulo_conversa(historico: list):
    """
    Usa a IA para criar um t√≠tulo curto para a conversa com base nas primeiras mensagens.
    """
    if not historico:
        return "Novo Chat"

    # Pega as 4 primeiras mensagens para ter contexto suficiente
    conversa_inicial = "\n".join(
        [f"{msg['role']}: {msg['content']}" for msg in historico[:4]]
    )

    prompt = f"""
    Abaixo est√° o in√≠cio de uma conversa entre um usu√°rio e um assistente de IA.
    Sua tarefa √© criar um t√≠tulo curto e conciso em portugu√™s (m√°ximo de 5 palavras) que resuma o t√≥pico principal.
    Responda APENAS com o t√≠tulo, sem aspas, nenhuma outra palavra ou pontua√ß√£o.

    CONVERSA:
    {conversa_inicial}

    T√çTULO CURTO:
    """
    try:
        # Usamos um modelo r√°pido e barato para esta tarefa simples
        resposta_modelo = openai_client.chat.completions.create(
            model='gpt-4o-mini',
            messages=[{"role": "user", "content": prompt}],
            max_tokens=15,
        )
        titulo = resposta_modelo.choices[0].message.content.strip().replace('"', '')
        return titulo if titulo else "Chat"
    except Exception as e:
        print(f"Erro ao gerar t√≠tulo: {e}")
        return "Chat"

# ==========================================================

def gerar_pagina_web_completa(descricao_usuario: str):
    """
    Usa a IA com um prompt detalhado para gerar uma p√°gina web completa (HTML/CSS/JS)
    com uma estrutura de resposta bem definida em Markdown.
    """
    print(f"Gerando p√°gina web completa para: '{descricao_usuario}'")

    # ESTE √â O PROMPT QUE FAZ A M√ÅGICA
    prompt_detalhado = f"""
    Voc√™ √© um assistente especialista em desenvolvimento web full-stack. Sua tarefa √© gerar um exemplo de c√≥digo completo e funcional com base na solicita√ß√£o do usu√°rio.

    Voc√™ DEVE ESTRITURAR sua resposta OBRIGATORIAMENTE no seguinte formato Markdown, sem nenhuma varia√ß√£o:

    1.  **Introdu√ß√£o:** Comece com uma √∫nica frase amig√°vel que descreva o que o c√≥digo faz.
    2.  **Estrutura de Arquivos:** Forne√ßa uma se√ß√£o `### Estrutura de Arquivos` mostrando a disposi√ß√£o dos arquivos em um bloco de c√≥digo.
    3.  **C√≥digo-Fonte:** Para cada arquivo (ex: `index.html`, `styles.css`, `script.js`), crie uma se√ß√£o separada com um cabe√ßalho numerado (ex: `### 1. `index.html``). Dentro de cada se√ß√£o, coloque o c√≥digo completo dentro de um bloco de c√≥digo Markdown com a linguagem apropriada (ex: ```html ... ```).
    4.  **Como Usar:** Termine com uma se√ß√£o `### Como Usar` explicando em 2 ou 3 passos simples como executar o projeto.

    N√ÉO inclua nenhuma outra conversa, explica√ß√£o ou texto fora desta estrutura.

    ---
    SOLICITA√á√ÉO DO USU√ÅRIO: "{descricao_usuario}"
    ---
    """

    try:
        # Usamos um modelo mais capaz para garantir a qualidade da estrutura e do c√≥digo
        resposta_modelo = openai_client.chat.completions.create(
            model='gpt-4o', # Recomendo um modelo mais forte como gpt-4o para esta tarefa
            messages=[{"role": "user", "content": prompt_detalhado}]
        )
        conteudo_estruturado = resposta_modelo.choices[0].message.content
        return conteudo_estruturado
    except Exception as e:
        print(f"Erro ao gerar p√°gina web completa: {e}")
        return "Desculpe, ocorreu um erro ao tentar gerar o c√≥digo. Por favor, tente novamente."
    
def precisa_buscar_na_web(pergunta: str):
    """
    Usa a IA para determinar se uma pergunta requer uma busca na web.
    """
    try:
        # Prompt aprimorado para ser mais direto e dar exemplos
        prompt = f"""
        Analise a pergunta do usu√°rio. A resposta exige conhecimento sobre eventos ou informa√ß√µes muito recentes (ocorridos hoje ou nos √∫ltimos dias)?
        Perguntas sobre not√≠cias, resultados esportivos, cota√ß√µes de moedas, previs√£o do tempo ou eventos atuais exigem uma busca na web.
        Responda APENAS com 'SIM' ou 'N√ÉO'.

        Pergunta: "{pergunta}"
        """
        response = openai_client.chat.completions.create(
            model='gpt-4o-mini',
            messages=[{"role": "user", "content": prompt}],
            max_tokens=3,
            temperature=0
        )
        decisao = response.choices[0].message.content.strip().upper()
        print(f"Decis√£o da IA para buscar na web: {decisao}") # Adicionado para debug
        return "SIM" in decisao
    except Exception as e:
        print(f"Erro ao verificar necessidade de busca na web: {e}")
        return False


def buscar_na_internet(query: str):
    """
    Busca na internet usando a API da Serper e retorna um contexto formatado.
    """
    if not SERPER_API_KEY:
        return "ERRO: A chave SERPER_API_KEY n√£o est√° configurada."

    url = "https://google.serper.dev/search"
    payload = json.dumps({"q": query, "gl": "br", "hl": "pt-br"})
    headers = {'X-API-KEY': SERPER_API_KEY, 'Content-Type': 'application/json'}

    try:
        response = requests.post(url, headers=headers, data=payload)
        response.raise_for_status()
        results = response.json()

        # Formata os resultados de forma clara para a IA
        contexto_formatado = ""
        if "organic" in results:
            for item in results["organic"][:5]: # Pega os 5 primeiros resultados
                titulo = item.get("title", "N/A")
                link = item.get("link", "N/A")
                snippet = item.get("snippet", "N/A")
                contexto_formatado += f"- T√≠tulo: {titulo}\n  Resumo: {snippet}\n  Fonte: üîó [Acessar site]({link})\n\n"
        
        return contexto_formatado if contexto_formatado else "Nenhum resultado relevante encontrado."
    except Exception as e:
        print(f"Erro na busca da Serper: {e}")
        return f"Ocorreu um erro ao tentar buscar na web: {e}"